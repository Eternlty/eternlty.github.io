function toRandomPost(){showNotification("🎲 正在为您寻找随机文章...");const o=[];if(document.querySelectorAll('a[href*="/posts/"]').forEach(e=>{const t=e.getAttribute("href");t&&t.includes("/posts/")&&!t.endsWith("/posts/")&&!t.includes("#")&&o.push(t)}),console.log("找到的文章链接:",o),o.length>0){const e=Math.floor(Math.random()*o.length),t=o[e];console.log("随机选择的文章:",t),showNotification(`🎯 即将跳转到: ${t}`),window.location.href=t}else console.log("未找到文章链接，跳转到归档页"),showNotification("❌ 未找到文章链接，跳转到归档页面"),window.location.ref="/archives/"}function clearAllCaches(){const o="📋 正在清理所有缓存...";console.log(o),showNotification(o),Promise.all([clearServiceWorkerCaches(),clearLocalStorage(),clearSessionStorage(),clearIndexedDB()]).then(()=>{const o="✅ 所有缓存已清理完成，即将刷新页面...";console.log(o),showNotification(o),setTimeout(()=>{window.location.reload(!0)},1e3)}).catch(o=>{console.error("清理缓存时出错:",o);showNotification("⚠️ 缓存清理完成（部分可能失败），即将刷新页面..."),setTimeout(()=>{window.location.reload(!0)},1e3)})}function showNotification(o){if("undefined"!=typeof btf&&btf.snackbarShow&&"undefined"!=typeof GLOBAL_CONFIG&&GLOBAL_CONFIG.Snackbar)try{return void btf.snackbarShow(o)}catch(o){console.warn("使用 Butterfly 通知系统失败:",o)}if("function"==typeof snackbarShow)try{return void snackbarShow(o)}catch(o){console.warn("使用原生 snackbar 失败:",o)}createCustomNotification(o)}function createCustomNotification(o){try{const e=document.getElementById("custom-cache-notification");e&&e.remove();const t=document.createElement("div");if(t.id="custom-cache-notification",t.style.cssText="\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background: #333;\n            color: white;\n            padding: 12px 24px;\n            border-radius: 8px;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n            z-index: 10000;\n            font-size: 14px;\n            max-width: 300px;\n            word-wrap: break-word;\n            animation: slideInFromRight 0.3s ease-out;\n        ",!document.getElementById("notification-styles")){const o=document.createElement("style");o.id="notification-styles",o.textContent="\n                @keyframes slideInFromRight {\n                    from {\n                        transform: translateX(100%);\n                        opacity: 0;\n                    }\n                    to {\n                        transform: translateX(0);\n                        opacity: 1;\n                    }\n                }\n                @keyframes slideOutToRight {\n                    from {\n                        transform: translateX(0);\n                        opacity: 1;\n                    }\n                    to {\n                        transform: translateX(100%);\n                        opacity: 0;\n                    }\n                }\n            ",document.head.appendChild(o)}t.textContent=o,document.body.appendChild(t),setTimeout(()=>{t.parentNode&&(t.style.animation="slideOutToRight 0.3s ease-in",setTimeout(()=>{t.parentNode&&t.remove()},300))},3e3)}catch(e){console.warn("创建自定义通知失败:",e),alert(o)}}async function clearServiceWorkerCaches(){if("serviceWorker"in navigator)try{const o=await navigator.serviceWorker.getRegistrations();for(let e of o)await e.unregister(),console.log("📋 Service Worker 已注销:",e.scope);if("caches"in window){const o=await caches.keys();for(let e of o)await caches.delete(e),console.log("📋 已清理缓存:",e)}console.log("✅ Service Worker 缓存清理完成")}catch(o){throw console.error("清理 Service Worker 缓存失败:",o),o}}function clearLocalStorage(){try{const o=localStorage.length;localStorage.clear(),console.log(`✅ 已清理 localStorage （${o} 项）`)}catch(o){throw console.error("清理 localStorage 失败:",o),o}}function clearSessionStorage(){try{const o=sessionStorage.length;sessionStorage.clear(),console.log(`✅ 已清理 sessionStorage （${o} 项）`)}catch(o){throw console.error("清理 sessionStorage 失败:",o),o}}async function clearIndexedDB(){if("indexedDB"in window)try{const o=["workbox-precache","workbox-runtime","workbox-strategies","keyval-store"];for(let e of o)try{await deleteDatabase(e),console.log(`✅ 已清理 IndexedDB: ${e}`)}catch(o){console.log(`⚠️ IndexedDB ${e} 不存在或清理失败`)}}catch(o){throw console.error("清理 IndexedDB 失败:",o),o}}function deleteDatabase(o){return new Promise((e,t)=>{const n=indexedDB.deleteDatabase(o);n.onsuccess=()=>e(),n.onerror=()=>t(n.error),n.onblocked=()=>{console.warn(`数据库 ${o} 删除被阻塞`),setTimeout(()=>e(),1e3)}})}